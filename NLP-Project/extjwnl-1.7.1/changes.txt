1.7.1 

- test data added back
- database synset loading fixed

1.7.0

- memory and resource dictionaries added
- support for windows wordnets < 2.1 dropped
- support for static instances dropped
- commons-logging replaced with slf4j
- several bugs fixed
- test coverage improved
- exception handling improved
- jndi support dropped

1.6.10

- PointerType.NOMINALIZATION renamed to PointerType.DERIVATION, scope extended to all parts of speech

1.6.9

- fixed synset iterator in database-backed dictionary
- maven dependencies updated

1.6.8

- miscellaneous bug fixes
- test code coverage increased
- maven plugin dependencies updated

1.6.7

- miscellaneous bug fixes
- added "argument ignored" warning in ewn
- dependencies updated

1.6.4

- miscellaneous bug fixes

1.6.3

- library is thread-safe

1.6.2 

- NPE in ewn

1.6.1

- improved morphology handling in ewn

1.6

- introduced ewn: a command-line interface with edit commands
- added isLexical function to PointerType
- few bug fixes
- few more input and data checks
- lowercased all table names to improve portability across platforms. take care on upgrade.

1.5.3

- rendering speed improved
- iterators and loading speed improved
- options to speed up things
- memory footprint reduced
- options to manage memory footprint size
- offset length is now homogenous across files
- more detailed log messages
- lemmas are now trimmed on word creation
- word and pointer lists now allow duplicates, checks should be on the client side

1.5.2

- introduced utility method Dictionary.getWordBySenseKey
- changed constants to enums

1.5.1

- multiple bug fixes from JWNL forum threads + unit test coverage
- initialization of default configurations (file,map,database) by using path or url only
- support for lex file num and lex file id in database
- database import speeded up
- warnings for dict format violations in save routine
- config file parameters documented in Javadoc

1.5

- creating, updating and writing dictionaries
- encodings (including UTF-8)
- Java generics
- huge dictionaries
- instance dictionaries
- Maven support
- new unit tests
- use counts
- package changed to net.sf.extjwnl
- index.sense, cntlist, cntlist.rev generation
- resource bundles loading changed
- fixed bugs in resources
- logging changed
- resolvable class removed
- more transient fields
- improved documentation
- summary generation
- removed toString caching

1.4.1 rc2

- fixed a bug which caused a file loading exception on Unix
- added api methods to access the lexical filename and lexical file id.

changes from version 1.3 to version 1.4

- Updated classes in the data package to be compatible with WordNet 2.1 and WordNet 3.0. 
- Extended API to add support for word tagged usage count and sense key information, for FileBackedDictionary and DatabaseBackedDictionary. 
- Added DictionaryToDatabaseWithUsageCount - populates a database with the index.sense file included. 
- Added a small amount JUnit test cases. 
- Multiple bugs fixed with DatabaseManagerImpl:
  - fixed a bug where the wrong offset was being returned
  - fixed a query where incorrect synsets could be accessed
- Added a new DatabaseManager and ElementFactory for databases using sense key information. 
- Refactored and improved documentation.

changes from version 1.2.1 to version 1.3

- Updated classes in the data package to be compatible with WordNet 2.0
- Updated DefaultMorphologicalProcessor to stem additional suffixes added in WordNet 1.7
- Fixed bugs in FileBackedDictionary and MapBackedDictionary that caused lookups on capitalized terms to return invalid results
- Introduced DatabaseBackedDictionary, plus files to create and populate the WordNet database.
- Removed the util.logging package. JWNL now has a runtime dependency on Apache commons-logging.
- Fixed several bugs in the relationship api. The interface for finding relationships is now contained in RelationshipFinder.
- License changed to BSD-style licence.
- Improved the dictionary caching api. AbstractCachingDictionary now has methods to turn caching on and off and change the cache sizes.
- Added getRandomIndexWord method to Dictionary.
- Added new example programs (VocabTrainer, TextInterface) to the utilities package.
- Added PointerType.getAllPointerTypesForPOS().

changes from version 1.2 to version 1.2.1

- Fixed npe in DictionaryToMap utility
- Moved utilities and tests into the net.didion.jwnl package
- changed license to LGPL

changes from version 1.1 to version 1.2

- JDK 1.4-specific optimizations:
 * LRUCache uses LinkedListMap
 * PrincetonChannelDictionaryFile uses channels to improve performance over PrincetonRandomAccessDictionaryFile
- Reorganized packages:
 * moved PointerUtils to the net.didion.jwnl.data
 * moved cache-related classes (Cache, CacheSet, LRUCache, LRUCacheSet) to net.didion.jwnl.util.cache
 * move factory interfaces/classes (Creatable, Installable, Element, Param) to net.didion.jwnl.util.factory
 * eliminated the caching package
 * moved dictionary file classes (AbstractDictionaryFile, DictionaryCatalog, DictionaryCatalogSet, DictionaryFile, DictionaryFileType, ObjectDictionaryFile, RandomAccessDictionaryFile) to net.didion.jwnl.dictionary.file
- Shortened the names of the Princeton classes 
- Made the dictionary path a parameter for file-based dictionaries rather than a parameter of version
- Added clearCache() and clearCache(DictionaryFileType) methods to AbstractCachingDictionary
- Reversed the key types of DictionaryCatalog and DictionaryCatalogSet so that DictionaryCatalog stores files by POS for a file type and DictionaryCatalogSet stores DictionaryCatalogs by file type
- Changed DictionaryToMap to clear the cache for a file type after processing all the files of that type
- Got rid of the CacheSet.CacheKey class...it was pretty useless and unnecessary
- Fixed a bug in which "ches" endings were being stemmed to "c" instead of "ch"
